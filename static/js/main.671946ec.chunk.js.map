{"version":3,"sources":["components/header/header.tsx","components/sidebar/sidebar.tsx","components/Recipe/recipe.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","nextStep","bind","prevStep","this","handleRecipeChange","className","onClick","Component","Sidebar","setStep","i","handleSetRecipe","sidebarLi","classNames","indexRecipe","value","push","key","countRecipe","Recipe","state","error","isLoaded","recipeData","setState","delta","x","quantity","fetch","then","res","json","result","recipes","length","message","name","type","id","defaultChecked","htmlFor","ingredients","map","item","cookingMethod","src","image","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.671946ec.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './header.scss';\n\nclass Header extends Component<any>{\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.nextStep = this.nextStep.bind(this);\n\t\tthis.prevStep = this.prevStep.bind(this);\n\t}\n\n\tnextStep() {\n\t\tthis.props.handleRecipeChange(1);\n\t}\n\tprevStep() {\n\t\tthis.props.handleRecipeChange(-1);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<header>\n\t\t\t\t<nav className=\"nav-top\">\n\t\t\t\t\t<span className=\"nav-prev\" onClick={this.prevStep}>Предыдущий</span>\n\t\t\t\t\t<span className=\"logo\">dessert</span>\n\t\t\t\t\t<span className=\"nav-next\" onClick={this.nextStep}>Следующий</span>\n\t\t\t\t</nav>\n\t\t\t</header>\n\t\t);\n\t}\n}\n\nexport default Header;\n","import React, {Component} from 'react';\nimport './sidebar.scss';\n\nclass Sidebar extends Component<any> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.setStep = this.setStep.bind(this);\n\t}\n\n\tsetStep(i) {\n\t\tthis.props.handleSetRecipe(i);\n\t}\n\n\trender() {\n\t\tlet sidebarLi = [];\n\t\tfor (let i = 0; i < this.props.countRecipe; i++) {\n\t\t\tconst classNames = \"nav-right-li\" + (this.props.indexRecipe === i ? ' active-list' : '');\n\t\t\tconst value = (i > 8 ? \"\" : \"0\") + (i + 1);\n\t\t\t// @ts-ignore\n\t\t\tsidebarLi.push(<li onClick={() => this.setStep(i)} className={classNames} key={i}>{value}</li>);\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"nav-right\">\n\t\t\t\t<ul className=\"nav-list\">\n\t\t\t\t\t{sidebarLi}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Sidebar;","import React, {Component} from 'react';\nimport './recipe.scss';\nimport Header from \"../header/header\";\nimport Sidebar from \"../sidebar/sidebar\";\n\nclass Recipe extends Component <any, any> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleRecipeChange = this.handleRecipeChange.bind(this);\n\t\tthis.handleSetRecipe = this.handleSetRecipe.bind(this);\n\t\tthis.state = {\n\t\t\terror: null,\n\t\t\tisLoaded: false,\n\t\t\trecipeData: [],\n\t\t\tindexRecipe: 0,\n\t\t\tcountRecipe: 0\n\t\t};\n\t}\n\thandleSetRecipe(i){\n\t\tthis.setState({indexRecipe: i});\n\t}\n\thandleRecipeChange(delta) {\n\t\tlet x = this.state.indexRecipe + delta;\n\t\tconst quantity = this.state.countRecipe - 1;\n\t\tif (x < 0) {\n\t\t\tx = quantity;\n\t\t}\n\t\tif (x > quantity) {\n\t\t\tx = 0;\n\t\t}\n\t\tthis.setState({indexRecipe: x});\n\t};\n\n\n\tcomponentDidMount() {\n\t\tfetch(\"/data.json\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(\n\t\t\t\t(result) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\trecipeData: result.recipes,\n\t\t\t\t\t\tcountRecipe: result.recipes.length\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\terror\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t)\n\t}\n\n\trender() {\n\t\tconst {error, isLoaded, recipeData, indexRecipe, countRecipe} = this.state;\n\t\tif (error) {\n\t\t\treturn <div>Ошибка: {error.message}</div>;\n\t\t} else if (!isLoaded) {\n\t\t\treturn <div>Загрузка...</div>;\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<Header handleRecipeChange={this.handleRecipeChange}/>\n\t\t\t\t\t<Sidebar handleSetRecipe={this.handleSetRecipe} countRecipe={countRecipe} indexRecipe={indexRecipe} />\n\t\t\t\t\t<div className=\"dessert-content\">\n\t\t\t\t\t\t<div className=\"dessert-content-item\">\n\t\t\t\t\t\t\t<div className=\"dessert-title\">\n\t\t\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t\t\t{recipeData[indexRecipe].name}\n\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"dessert-ingredients\">\n\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"recipe-tiramisu\" id=\"dessert-ingredients-tiramisu\" defaultChecked={true}/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"dessert-ingredients-tiramisu\"><h2>ИНГРЕДИЕНТЫ:</h2></label>\n\t\t\t\t\t\t\t\t<ul className=\"dessert-item\">\n\t\t\t\t\t\t\t\t\t{recipeData[indexRecipe].ingredients.map(item => (\n\t\t\t\t\t\t\t\t\t\t<li key={item.name}>\n\t\t\t\t\t\t\t\t\t\t\t{item.name}{item.quantity ? \" - \" + item.quantity : null}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"dessert-cooking-method\">\n\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"recipe-tiramisu\" id=\"dessert-cooking-method-tiramisu\"/>\n\t\t\t\t\t\t\t\t<label htmlFor=\"dessert-cooking-method-tiramisu\"><h2>СПОСОБ ПРИГОТОВЛЕНИЯ:</h2></label>\n\t\t\t\t\t\t\t\t<ol className=\"dessert-item\">\n\t\t\t\t\t\t\t\t\t{recipeData[indexRecipe].cookingMethod.map(item => (\n\t\t\t\t\t\t\t\t\t\t<li key={item}>\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ol>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"dessert-content-item\">\n\t\t\t\t\t\t\t<div className=\"block-img\">\n\t\t\t\t\t\t\t\t<img src={recipeData[indexRecipe].image} alt={recipeData[indexRecipe].name} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default Recipe;","import React from 'react';\nimport './App.scss';\nimport Recipe from \"./components/Recipe/recipe\";\n\nexport default function App() {\n\treturn (\n\t\t<Recipe />\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\tprocess.env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: {'Service-Worker': 'script'}\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App/>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}